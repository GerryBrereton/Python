__author__ = 'jkordish'
# -*- coding: utf-8 -*-
'''Experiment taking CVE data from NVDCVE and injecting it into a Riak cluster
Can't recall what this particular version of the script did - been a long time '''

from lxml import etree
import os
import riak
import time

def main():
    start_time = time.time()
    parse_nvd()
    print time.time() - start_time, "seconds"


def parse_nvd():
    bucket = 'cve'

    for directory, subdirectories, files in os.walk('data/nvdcve'):
        for file in files:

            ifile = os.path.join(directory, file)

            tree = etree.parse(ifile)
            root = tree.getroot()

            for entry in root:

                d = {}
                cvsslist = []
                reflist = []
                softlist = []
                cve = {}

                id = entry.get('id')
                cve['Name'] = id

                # Walk through and get the CVE Summary
                for summary in entry.iterchildren(tag='{http://scap.nist.gov/schema/vulnerability/0.4}summary'):
                    description = {}
                    description['Description'] = (summary.text)

                for datetime in entry.iterchildren(tag='{http://scap.nist.gov/schema/vulnerability/0.4}published-datetime'):
                    date = {}
                    date['Date'] = datetime.text.split('T')[0].replace('-', '')

                # Walk through and get the cvss info
                for cvss in entry.iterchildren(tag='{http://scap.nist.gov/schema/vulnerability/0.4}cvss'):
                    cvssdict = {}
                    for cvssb in cvss.iterchildren():
                        for cvssc in cvssb.iterchildren():
                            cvss_name = cvssc.tag.split('}')[1].title()
                            cvss_content = cvssc.text
                            dict = {cvss_name: cvss_content for (key, value) in entry.items()}
                            cvsslist.append(dict)

                # Walk through and get the references
                for refs in entry.iterchildren(tag='{http://scap.nist.gov/schema/vulnerability/0.4}references'):
                    x = {}
                    for ref in refs.iter('{http://scap.nist.gov/schema/vulnerability/0.4}reference'):
                        reflink = {'Link': ref.get('href') for (key, value) in entry.items()}
                        x.update(reflink)
                        reflist.append(x)

                # Walk through and get the vulnerable software list
                for software in entry.iterchildren(tag='{http://scap.nist.gov/schema/vulnerability/0.4}vulnerable-software-list'):
                    for products in software.iterchildren(tag='{http://scap.nist.gov/schema/vulnerability/0.4}product'):
                        x = {}
                        vendor = {}
                        product = {}
                        version = {}
                        minora = {}
                        ext2 = {}
                        vendor['Vendor']   = products.text.split(':')[2:][0].title()
                        product['Product'] = products.text.split(':')[2:][1].title()
                        try:
                            version['Version'] = products.text.split(':')[2:][2]
                        except:
                            version['Version'] = 'None'
                        try:
                            if products.text.split(':')[2:][3] is not '':
                                minora['ext1'] = products.text.split(':')[2:][3]
                        except:
                            pass
                        try:
                            if products.text.split(':')[2:][3] is not '':
                                ext2['ext2'] = products.text.split(':')[2:][4]
                        except:
                            pass

                        x.update(vendor)
                        x.update(product)
                        x.update(version)
                        x.update(minora)
                        x.update(ext2)
                        softlist.append(x)

                # Pass entry to riak for storage
                d[id] = (cve, date, description, cvsslist, reflist, softlist)
                riak_store(bucket, d)
#                print('Completed '+id)
#        print('Completed '+ifile)

def riak_store(bucket, data):
    '''push data into the riak cluster'''
    bucket = bucket
    data = data

    client = riak.RiakClient(host='10.120.10.237', port=8087, transport_class=riak.RiakPbcTransport)

    cve_bucket = client.bucket(bucket)

    for key, value in data.items():
        print(' => pushing '+key)
        try:
            cve_put = cve_bucket.new(str(key), data=str(value))
            cve_put.store()
        except:
            pass

if __name__ == '__main__':
    main()
