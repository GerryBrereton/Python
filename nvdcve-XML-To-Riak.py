__author__ = 'jkordish'
# -*- coding: utf-8 -*-
'''Experiment taking CVE data from NVDCVE and injecting it into a Riak cluster'''

from lxml import etree
import os
import uuid
import riak

def main():
    cve_get_cvss()
#    cve_get_refs()
    cve_get_version()

def cve_get_cvss():
    bucket='cve_cvss'

    for directory, subdirectories, files in os.walk('data/nvdcve'):
        for file in files:

            ifile = os.path.join(directory, file)
            cvssdict = {}

            tree = etree.parse(ifile)
            root = tree.getroot()

            for entry in root:
                cvsslist = []
                cvssd = {}
                id = entry.get('id')
                for cvss in entry.iterchildren(tag='{http://scap.nist.gov/schema/vulnerability/0.4}cvss'):
                    for cvssb in cvss.iterchildren():
                        for cvssc in cvssb.iterchildren():
                            name = cvssc.tag.split('}')[1]
                            content = cvssc.text
                            dict = {name: content for (key, value) in entry.items()}
                            cvsslist.append(dict)
                cvssdict[id] = cvsslist
            print(len(cvssdict))
            riak_store(bucket, cvssdict)
            print('completed cvss links on '+ifile)

def cve_get_refs():
    bucket='cve_references'

    for directory, subdirectories, files in os.walk('data/nvdcve'):
        for file in files:

            ifile = os.path.join(directory, file)
            refdict = {}

            tree = etree.parse(ifile)
            root = tree.getroot()

            for entry in root:
                reflist = []
                id = entry.get('id')
                for refs in entry.iterchildren(tag='{http://scap.nist.gov/schema/vulnerability/0.4}references'):
                    for ref in refs.iter('{http://scap.nist.gov/schema/vulnerability/0.4}reference'):
                        dict = {'Link': ref.get('href') for (key, value) in entry.items()}
                        reflist.append(dict)
                refdict[id] = reflist
            print(len(refdict))
            riak_store(bucket, refdict)
            print('completed references links on '+ifile)

def cve_get_version():
    bucket='cve_software_version'

    for directory, subdirectories, files in os.walk('data/nvdcve'):
        for file in files:

            ifile = os.path.join(directory, file)
            linkdict = {}

            tree = etree.parse(ifile)
            root = tree.getroot()

            for entry in root:
                id = entry.get('id')
                linklist = []
                for software in entry.iterchildren(tag='{http://scap.nist.gov/schema/vulnerability/0.4}vulnerable-software-list'):
                    vendor = product = version = None
                    for products in software.iterchildren(tag='{http://scap.nist.gov/schema/vulnerability/0.4}product'):
                        vendor = 'Vendor: '+str(products.text.split(':')[2:][0])
                        product = 'Product: '+str(products.text.split(':')[2:][1])
                        try:
                            version = 'Version: '+str(products.text.split(':')[2:][2])
                        except:
                            version = 'Version: -'
                        dict= {}

                        linklist.append((vendor, product, version))
                linkdict[id] = linklist
            print(len(linkdict))
            riak_store(bucket,linkdict)
            print('completed version links on '+ifile)

def riak_store(bucket, data):
    bucket = bucket
    data = data
#    cve_id = ''

    client = riak.RiakClient(host='10.120.10.237', port=8098)

    cve_bucket = client.bucket('cve')
    link_bucket = client.bucket(bucket)

    for key,value in data.items():
        cve_id = cve_bucket.get(key)
        try:
#            uuid.uuid1().hex
            new_ref = link_bucket.new(key, data=value)
            new_ref.exists()
            new_ref.add_link(cve_id)
            new_ref.store()
            cve_id.add_link(new_ref)
            cve_id.store()
        except:
            pass

if __name__ == '__main__':
    main()